import cadquery as cq
from ols import keycap
from ols_old import keycap as keycap_old

r3 = keycap()
r3_old = cq.importers.importStep("old/ols-v1-r3.step")
r2_old = cq.importers.importStep("old/ols-v1-r2.step")
r4_old = cq.importers.importStep("old/ols-v1-r4.step")
r3h_dot_old = cq.importers.importStep("old/ols-v1-r3-home-dot.step")
thumb_old = cq.importers.importStep("old/ols-v1-thumb.step")
thumbx_old = keycap_old(angle=6, depth=-1.0, height=5.5)
#r3_cut = keycap(cut=True).rotate((0,0,0),(1,0,0),90)
#r3h = keycap(depth=2.0)
#r3h_cut = keycap(depth=2.0, cut=True).rotate((0,0,0),(1,0,0),90)
r3h_dot = keycap(depth=2.0, homingDot=True)
#r3h_dot_cut = keycap(depth=2.0, homingDot=True, cut=True).rotate((0,0,0),(1,0,0),90)
r2 = keycap(angle=-6, height=5.5)
#r2_cut = keycap(angle=-6, height=5.5, cut=0.8).rotate((0,0,0),(1,0,0),90)
r4 = keycap(angle=6, height=5.5)
#r4_cut = keycap(angle=6, height=5.5, cut=0.4).rotate((0,0,0),(1,0,0),90)
thumb = keycap(angle=-6, depth=-1.0, height=5.5)
thumbx = keycap(angle=6, depth=-1.0, height=5.5)
#thumb_cut = keycap(angle=-6, depth=-1.0, height=5.5, cut=0.8).rotate((0,0,0),(1,0,0),90)
#thumb15 = keycap(angle=-6, unitY=1.5, depth=-1.0, height=5.5)
#thumb15_cut = keycap(angle=-6, unitY=1.5, depth=-1.0, height=5.5, cut=0.8).rotate((0,0,0),(1,0,0),90)

assembly = cq.Assembly(cq.Workplane("XY").transformed(rotate=(0,0,90)), color=cq.Color(1,173/255,0))
assembly.add(r3, name='r3')
assembly.add(r3, name='r3x', loc=cq.Location((0,0,0), (0,0,1), 180), color=cq.Color(0,0,1))
assembly.add(r2, name='r2', loc=cq.Location((0,-19.05,0)))
assembly.add(r4, name='r4', loc=cq.Location((0,19.05,0)))
assembly.add(r2, name='r2x', loc=cq.Location((0,19.05,0), (0,0,1), 180), color=cq.Color(0,0,1))
assembly.add(r4, name='r4x', loc=cq.Location((0,-19.05,0), (0,0,1), 180), color=cq.Color(0,0,1))
assembly.add(thumb, name='thumb', loc=cq.Location((0,19.05*2,0)))
assembly.add(thumbx, name='thumbx', loc=cq.Location((0,19.05*2,0), (0,0,1), 180), color=cq.Color(0,0,1))
assembly.add(r3h_dot, name='r3h', loc=cq.Location((0,-19.05*2,0)))
assembly.add(r3h_dot, name='r3hx', loc=cq.Location((0,-19.05*2,0), (0,0,1), 180), color=cq.Color(0,0,1))

assembly.add(r3_old, name='r3_old', loc=cq.Location((19.05,0,0)))
assembly.add(r3_old, name='r3x_old', loc=cq.Location((19.05,0,0), (0,0,1), 180), color=cq.Color(0,0,1))
assembly.add(r2_old, name='r2_old', loc=cq.Location((19.05,-19.05,0)))
assembly.add(r2_old, name='r2x_old', loc=cq.Location((19.05,19.05,0), (0,0,1), 180), color=cq.Color(0,0,1))
assembly.add(r4_old, name='r4_old', loc=cq.Location((19.05,19.05,0)))
assembly.add(r4_old, name='r4x_old', loc=cq.Location((19.05,-19.05,0), (0,0,1), 180), color=cq.Color(0,0,1))
assembly.add(thumb_old, name='thumb_old', loc=cq.Location((19.05,19.05*2,0)))
assembly.add(thumbx_old, name='thumbx_old', loc=cq.Location((19.05,19.05*2,0), (0,0,1), 180), color=cq.Color(0,0,1))
assembly.add(r3h_dot_old, name='r3h_old', loc=cq.Location((19.05,-19.05*2,0)))
assembly.add(r3h_dot_old, name='r3hx_old', loc=cq.Location((19.05,-19.05*2,0), (0,0,1), 180), color=cq.Color(0,0,1))

assembly.add(r4_old, name='r4c1', loc=cq.Location((-19.05,19.05,0)), color=cq.Color(1,0,0))
assembly.add(r4, name='r4c2', loc=cq.Location((-19.05,19.05,0)), color=cq.Color(0,1,0))
assembly.add(r2_old, name='r2c1', loc=cq.Location((-19.05,-19.05,0)), color=cq.Color(1,0,0))
assembly.add(r2, name='r2c2', loc=cq.Location((-19.05,-19.05,0)), color=cq.Color(0,1,0))
assembly.add(r3_old, name='r3c1', loc=cq.Location((-19.05,0,0)), color=cq.Color(1,0,0))
assembly.add(r3, name='r3c2', loc=cq.Location((-19.05,0,0)), color=cq.Color(0,1,0))
assembly.add(thumb_old, name='thumb_c1', loc=cq.Location((-19.05,19.05*2,0)), color=cq.Color(1,0,0))
assembly.add(thumb, name='thumb_c2', loc=cq.Location((-19.05,19.05*2,0)), color=cq.Color(0,1,0))
assembly.add(r3h_dot_old, name='r3h_c1', loc=cq.Location((-19.05,-19.05*2,0)), color=cq.Color(1,0,0))
assembly.add(r3h_dot, name='r3h_c2', loc=cq.Location((-19.05,-19.05*2,0)), color=cq.Color(0,1,0))
#assembly.add(r2, name='r2', loc=cq.Location((0, -19.05, 0)))
#assembly.add(r1, loc=cq.Location((0, -19.05*2, 0)))
#assembly.add(r4, name='r4', loc=cq.Location((0, 19.05, 0)))
#assembly.add(r3h_dot, loc=cq.Location((0, 19.05 * 2, 0)))
#assembly.add(thumb, loc=cq.Location((0, 19.05 * 3, 0)))
##assembly.add(keycap(depth=-1.0, height=5.5, cut=0.5), loc=cq.Location((0, 19.05*3, 0)))

if 'show_object' in locals():
    #show_object(r3)
    #show_object(r2.rotate((0,0,0),(0,0,1),-90).translate((-19.05, 0)))
    #show_object(r4.rotate((0,0,0),(0,0,1), -90).translate((19.05, 0)))
    #show_object(thumb.rotate((0,0,0),(0,0,1), -90).translate((19.05*2, 0)))
    #show_object(thumb15.rotate((0,0,0),(0,0,1), -90).translate((19.05*2, 19.05)))
    show_object(assembly)
    
if __name__ == '__main__':
    cq.exporters.export(r3, 'generated/mx/ols-v1-r3.stl', tolerance=0.001, angularTolerance=0.05)
    cq.exporters.export(r3_cut, 'generated/mx/ols-v1-r3-cut.stl', tolerance=0.001, angularTolerance=0.05)
    cq.exporters.export(r3h, 'generated/mx/ols-v1-r3-home.stl', tolerance=0.001, angularTolerance=0.05)
    cq.exporters.export(r3h_cut, 'generated/mx/ols-v1-r3-home-cut.stl', tolerance=0.001, angularTolerance=0.05)
    cq.exporters.export(r3h_dot, 'generated/mx/ols-v1-r3-home-dot.stl', tolerance=0.001, angularTolerance=0.05)
    cq.exporters.export(r3h_dot_cut, 'generated/mx/ols-v1-r3-home-dot-cut.stl', tolerance=0.001, angularTolerance=0.05)
    cq.exporters.export(r2, 'generated/mx/ols-v1-r2.stl', tolerance=0.001, angularTolerance=0.05)
    cq.exporters.export(r2_cut, 'generated/mx/ols-v1-r2-cut.stl', tolerance=0.001, angularTolerance=0.05)
    cq.exporters.export(r4, 'generated/mx/ols-v1-r4.stl', tolerance=0.001, angularTolerance=0.05)
    cq.exporters.export(r4_cut, 'generated/mx/ols-v1-r4-cut.stl', tolerance=0.001, angularTolerance=0.05)
    cq.exporters.export(thumb, 'generated/mx/ols-v1-thumb.stl', tolerance=0.001, angularTolerance=0.05)
    cq.exporters.export(thumb_cut, 'generated/mx/ols-v1-thumb-cut.stl', tolerance=0.001, angularTolerance=0.05)
    cq.exporters.export(thumb15, 'generated/mx/ols-v1-thumb-1.5u.stl', tolerance=0.001, angularTolerance=0.05)
    cq.exporters.export(thumb15_cut, 'generated/mx/ols-v1-thumb-1.5u-cut.stl', tolerance=0.001, angularTolerance=0.05)
    
    cq.exporters.export(r3, 'generated/mx/ols-v1-r3.step')
    cq.exporters.export(r3_cut, 'generated/mx/ols-v1-r3-cut.step')
    cq.exporters.export(r3h, 'generated/mx/ols-v1-r3-home.step')
    cq.exporters.export(r3h_cut, 'generated/mx/ols-v1-r3-home-cut.step')
    cq.exporters.export(r3h_dot, 'generated/mx/ols-v1-r3-home-dot.step')
    cq.exporters.export(r3h_dot_cut, 'generated/mx/ols-v1-r3-home-dot-cut.step')
    cq.exporters.export(r2, 'generated/mx/ols-v1-r2.step')
    cq.exporters.export(r2_cut, 'generated/mx/ols-v1-r2-cut.step')
    cq.exporters.export(r4, 'generated/mx/ols-v1-r4.step')
    cq.exporters.export(r4_cut, 'generated/mx/ols-v1-r4-cut.step')
    cq.exporters.export(thumb, 'generated/mx/ols-v1-thumb.step')
    cq.exporters.export(thumb_cut, 'generated/mx/ols-v1-thumb-cut.step')
    cq.exporters.export(thumb15, 'generated/mx/ols-v1-thumb-1.5u.step')
    cq.exporters.export(thumb_cut, 'generated/mx/ols-v1-thumb-1.5u-cut.step')
